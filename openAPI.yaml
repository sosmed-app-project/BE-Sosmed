openapi: 3.0.0
info:
  description: Ini merupakan OPEN API Social Media App
  version: "1.0.0"
  title: Social Media App
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: juliussiregar1011@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JULIUSSIREGAR1011/Social-Media/1.0.0
  - description: Social Media App Server
    url: https://social-media-app-api.example.com/v1
tags:
  - name: auth
    description: Fitur Autentikasi
  - name: users
    description: Fitur CRUD users
  - name: posting
    description: Fitur CRUD posting
  - name: comment
    description: Fitur CRUD comment
  - name: like
    description: Fitur Like
paths:
  /login:
    post:
      tags:
        - auth
      summary: authentication
      description: authentication using email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: julius@gmail.com
                password:
                  type: string
                  example: 12345
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                    example: 200
                  message:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                        example: juliussiregar
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2OTM4ODY3MzUsInVzZXJJZCI6Im9SNGJteDlSSHUzUjhhIn0.R2p7Vils0rZZbS-9gEbayncyxvUEATnav0i6vPRCIz0
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError"

  /register:
    post:
      tags:
        - users
      summary: add new user
      description: this endpoint to add new user by sending all information required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: juliussiregar
                tanggal_lahir:
                  type: string
                  format: date
                  example: 1997-11-10
                email:
                  type: string
                  example: julius@gmail.com
                no_handphone:
                  type: string
                  example: 081234567
                password:
                  type: string
                  example: 12345
      responses:
        "201":
          $ref: "#/components/responses/responseCreated"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseInternalError"

  /users/{user_id}:
    get:
      tags:
        - users
      summary: get specific user data
      description: get specific user data using user id
      parameters:
        - name: user_id
          description: "identifier user"
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: juliussiregar
                  tanggal_lahir:
                    type: string
                    format: date
                    example: 1997-11-10
                  email:
                    type: string
                    example: julius@gmail.com
                  no_handphone:
                    type: string
                    example: 081234567
                  password:
                    type: string
                    example: 12345
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError"

    put:
      tags:
        - users
      summary: Update user
      description: Endpoint ini digunakan untuk memperbarui data pengguna dengan ID 1
      parameters:
        - name: user_id
          description: "identifier user"
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: juliusaja
                tanggal_lahir:
                  type: string
                  format: date
                  example: 1997-11-10
                email:
                  type: string
                  example: julius@gmail.com
                no_handphone:
                  type: string
                  example: 081234567
                password:
                  type: string
                  example: 54321
      responses:
        "201":
          $ref: "#/components/responses/responseCreated"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseInternalError"

    delete:
      tags:
        - users
      summary: delete user
      description: this endpoint to delete user by id using param
      parameters:
        - name: user_id
          description: "identifier user"
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/responseSuccess"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError"
  /posting:
    get:
      tags:
        - posting
      summary: Get all postings
      description: Get a list of all postings
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                    example: 200
                  message:
                    type: string
                    example: operation success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        posting_id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 1
                        caption:
                          type: string
                          example: "Hello World"
                        photoURL:
                          type: string
                          example: "https://gcp.com/hellokamu.jpg"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError"
          
    post:
      tags:
        - posting
      summary: Add new posting
      description: Add a new posting by sending all required information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                caption:
                  type: string
                  example: "Hello mas mas"
                photoURL:
                  type: string
                  example: "https://gcp.com/pemandangan.jpg"
      responses:
        "201":
          $ref: "#/components/responses/responseCreated"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseInternalError"

  /posting/{posting_id}:
    get:
      tags:
        - posting
      summary: Get specific posting data
      description: Get data of a specific posting by posting ID
      parameters:
        - name: posting_id
          description: "identifier posting"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  posting_id:
                    type: integer
                    example: 1
                  user_id:
                    type: integer
                    example: 1
                  caption:
                    type: string
                    example: "Hello World"
                  photoURL:
                    type: string
                    example: Hello.jpg
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError"
          
    put:
        tags:
          - posting
        summary: Update posting
        description: Update data of a specific posting by posting ID
        parameters:
          - name: posting_id
            description: "identifier posting"
            required: true
            in: path
            schema:
              type: integer
              example: 1
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  caption:
                    type: string
                    example: "Hallo mbak"
                  photoURL:
                    type: string
                    example: "https://gcp.com/hallombak.jpg"
        responses:
          "201":
            $ref: "#/components/responses/responseCreated"
          "400":
            $ref: "#/components/responses/responseBadRequest"
          "404":
            $ref: "#/components/responses/responseNotFound"
          "500":
            $ref: "#/components/responses/responseInternalError"
    delete:
      tags:
        - posting
      summary: Delete posting
      description: Delete a posting by posting ID
      parameters:
        - name: posting_id
          description: "identifier posting"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        "200":
          $ref: "#/components/responses/responseSuccess"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError"   
  /comment:
    get:
      tags:
        - comment
      summary: Get all comments
      description: Get a list of all comments
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                    example: 200
                  message:
                    type: string
                    example: operation success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        comment_id:
                          type: integer
                          example: 1
                        posting_id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 1
                        coaption:
                          type: string
                          example: "Mantap bro!"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError"
          
    post:
      tags:
        - comment
      summary: Add new comment
      description: Add a new comment by sending all required information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                posting_id:
                  type: integer
                  example: 1
                user_id:
                  type: integer
                  example: 1
                content:
                  type: string
                  example: "Gila lu bro!"
      responses:
        "201":
          $ref: "#/components/responses/responseCreated"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseInternalError"

  /comment/{comment_id}:
    get:
      tags:
        - comment
      summary: Get specific comment data
      description: Get data of a specific comment by comment ID
      parameters:
        - name: comment_id
          description: "identifier comment"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment_id:
                    type: integer
                    example: 1
                  posting_id:
                    type: integer
                    example: 1
                  user_id:
                    type: integer
                    example: 1
                  content:
                    type: string
                    example: "Mantap bro!"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError"
    delete:
      tags:
        - comment
      summary: Delete comment
      description: Delete a comment by comment ID
      parameters:
        - name: comment_id
          description: "identifier comment"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        "200":
          $ref: "#/components/responses/responseSuccess"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError" 

  /like:
    get:
      tags:
        - like
      summary: Get all likes
      description: Get a list of all likes
      parameters:
        - name: user_id
          description: "Filter likes by user_id"
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: posting_id
          description: "Filter likes by posting_id"
          in: query
          required: false
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int64
                    example: 200
                  message:
                    type: string
                    example: operation success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        like_id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 1
                        posting_id:
                          type: integer
                          example: 1
                        count_like:
                          type: boolean
                          example: true
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseInternalError"
            
    post:
      tags:
        - like
      summary: Add new like
      description: Add a new like by sending all required information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                posting_id:
                  type: integer
                  example: 1
                count_like:
                  type: boolean
                  example: true
      responses:
        "201":
          $ref: "#/components/responses/responseCreated"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseInternalError"
  /like/{like_id}:   
      delete:
        tags:
          - like
        summary: Delete like
        description: Delete a like by like ID
        parameters:
          - name: like_id
            description: "identifier like"
            required: true
            in: path
            schema:
              type: integer
              example: 1
        responses:
          "200":
            $ref: "#/components/responses/responseSuccess"
          "404":
            $ref: "#/components/responses/responseNotFound"
          "500":
            $ref: "#/components/responses/responseInternalError"

components:
  responses:
    responseSuccess:
        description: success
        content:
          application/json:
            schema:
              type: object
              properties:
                "code":
                  type: integer
                  format: int64
                  example: 200
                "message":
                  type: string
                  example: success
                "data":
                  type: object
                  example: null
    responseCreated:
      description: User created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: User created/updated successfully
    responseBadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad Request
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: password
                    message:
                      type: string
                      example: Password is required
    responseNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Not Found
    responseInternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal Server Error